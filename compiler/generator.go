package compiler

import (
	"go/ast"
	//"go/token"
	"fmt"
	"github.com/mochi-lang/mochi/parser"
)

// genComment generates the whole comment for the file
func genComment() *ast.CommentGroup {
	c := ast.CommentGroup{
		List: []*ast.Comment{
			&ast.Comment{
				Slash: 3,
				Text:  "// Code is generated by Mochi",
			},
		},
	}

	return &c
}

// genDecls generates declare ast go from the LISP AST
func genDecls(tree []parser.Node) []ast.Decl {
	decls := make([]ast.Decl, len(tree))

	for i, node := range tree {
		if node.Type() != parser.NodeCall {
			panic("At the top level of LISP is function call inside ()")
		}

		callee := node.(*parser.CallNode).Callee.(*parser.IdentNode)
		switch callee.Ident {
		case "defn":
			decls[i] = topLevelNodeToDecl(node.(*parser.CallNode))
		default:
			panic(fmt.Sprintf("Doesn't support %v at top level", callee.Ident))
		}
	}

	return decls
}
